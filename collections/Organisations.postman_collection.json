{
	"info": {
		"_postman_id": "4a8e1590-162d-4d5f-b25e-8a89412f4d9c",
		"name": "Organisations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29613235"
	},
	"item": [
		{
			"name": "Flow and getting neccessary variables",
			"item": [
				{
					"name": "Получить id контент- менеджера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('content_manager_id', pm.response.json().values[0].id);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "auth.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "content-type",
								"value": "text/plain;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://oneid.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://oneid.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{content_manager_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://auth.unionetest.ru/api/v1/getuserdata",
							"protocol": "https",
							"host": [
								"auth",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v1",
								"getuserdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить id юзер- орга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('organisator_id', pm.response.json().values[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "auth.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "content-type",
								"value": "text/plain;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://oneid.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://oneid.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{organisator_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://auth.unionetest.ru/api/v1/getuserdata",
							"protocol": "https",
							"host": [
								"auth",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v1",
								"getuserdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить id юзер- орга 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('organisator_2_id', pm.response.json().values[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "auth.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "content-type",
								"value": "text/plain;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://oneid.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://oneid.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{organisator_2_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://auth.unionetest.ru/api/v1/getuserdata",
							"protocol": "https",
							"host": [
								"auth",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v1",
								"getuserdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить id тестируемого",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('tester_id', pm.response.json().values[0].id);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "auth.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "content-type",
								"value": "text/plain;charset=UTF-8"
							},
							{
								"key": "origin",
								"value": "https://oneid.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://oneid.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{tester_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://auth.unionetest.ru/api/v1/getuserdata",
							"protocol": "https",
							"host": [
								"auth",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v1",
								"getuserdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание организации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('organisation_id', pm.response.json().id);\r",
									"pm.test(\"creating organisation for deleting\", () => {\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.collectionVariables.set('organisation_1_id', response.json().id);\r",
									"    });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.collectionVariables.set('organisation_2_id', response.json().id);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": \"gidropony1905@gmail.com\",\r\n  \"name\": \"Postman_test\",\r\n  \"desc\": \"Used for autotest, this should be deleted by now probably\",\r\n  \"email\": \"gidropony1905@gmail.com\",\r\n  \"phone\": \"9625568900\",\r\n  \"models\": [\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить юзер-орга в организацию",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "api-buildernext-assmnt.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "authorization",
								"value": "2196ce7e26cd03570e4c0171fc1479d49a01878bf679164ad204c5884f584412"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://assessment.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://assessment.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"idOrg\": \"{{organisation_id}}\",\r\n    \"idUser\": \"{{organisator_id}}\"\r\n}"
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/user",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание модели курса",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('model_id', pm.response.json()._id);\r",
									"pm.collectionVariables.set('model', JSON.stringify(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "api-models-assmnt.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "authorization",
								"value": "{{content_manager_token}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://models-assessment.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://models-assessment.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stage\": \"draft\",\r\n    \"display_results\": \"competency_only\",\r\n    \"stages\": [\r\n        {\r\n            \"name\": \"Postman_test\",\r\n            \"color\": \"#E26C3C\",\r\n            \"order\": 1\r\n        }\r\n    ],\r\n    \"common_params\": {\r\n        \"name\": \"Postman_test\",\r\n        \"level\": \"normal_level\",\r\n        \"count_of_attempts\": 2,\r\n        \"registration_type\": \"link\",\r\n        \"max_count_of_testers\": 10000,\r\n        \"certificates\": false\r\n    },\r\n    \"fields_display\": {\r\n        \"show_it\": false,\r\n        \"show_docs\": false,\r\n        \"show_description\": false,\r\n        \"show_academic_hours\": true,\r\n        \"show_academic_months\": true,\r\n        \"show_branch_industry\": false\r\n    },\r\n    \"test_options\": {\r\n        \"weight_questions\": [\r\n            {\r\n                \"type\": \"one\",\r\n                \"tag\": \"competency_level\",\r\n                \"count\": 1,\r\n                \"weight\": 1,\r\n                \"is_enabled\": true,\r\n                \"time_for_question\": 10\r\n            }\r\n        ],\r\n        \"weight_levels\": [\r\n            {\r\n                \"level\": \"normal_level\",\r\n                \"weight\": 1\r\n            },\r\n            {\r\n                \"level\": \"advanced_level\",\r\n                \"weight\": 2\r\n            },\r\n            {\r\n                \"level\": \"expert_level\",\r\n                \"weight\": 3\r\n            }\r\n        ],\r\n        \"output\": \"by_one\",\r\n        \"test_type\": \"competency\"\r\n    },\r\n    \"levels\": [\r\n        {\r\n            \"type\": \"basic_level\",\r\n            \"from\": 0,\r\n            \"to\": 17\r\n        },\r\n        {\r\n            \"type\": \"normal_level\",\r\n            \"from\": 18,\r\n            \"to\": 100\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-models-assmnt.unionetest.ru/api/models/v2",
							"protocol": "https",
							"host": [
								"api-models-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"models",
								"v2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Публикация модели курса Copy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "authority",
								"value": "api-models-assmnt.unionetest.ru"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "authorization",
								"value": "{{content_manager_token}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://models-assessment.unionetest.ru"
							},
							{
								"key": "referer",
								"value": "https://models-assessment.unionetest.ru/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{model}}"
						},
						"url": {
							"raw": "https://api-models-assmnt.unionetest.ru/api/models/publish-by-id?id={{model_id}}",
							"protocol": "https",
							"host": [
								"api-models-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"models",
								"publish-by-id"
							],
							"query": [
								{
									"key": "id",
									"value": "{{model_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let today = require('moment');",
							"let tomorrow = today().add(1, 'days')",
							"pm.collectionVariables.set('today', today());",
							"pm.collectionVariables.set('tomorrow', tomorrow);"
						]
					}
				}
			]
		},
		{
			"name": "Organisations",
			"item": [
				{
					"name": "Получить список организаций для аккаунт менеджера с количеством курсов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/moderate/organizations",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"moderate",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание организации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"desc\",\r",
									"        \"info\",\r",
									"        \"models\",\r",
									"        \"created_at\",\r",
									"        \"updated_at\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"            },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"desc\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"info\": {\r",
									"            \"type\": \"object\"\r",
									"        },\r",
									"        \"models\": {\r",
									"            \"type\": \"array\"\r",
									"        },\r",
									"        \"created_at\":{\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updated_at\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": \"gidropony1905@gmail.com\",\r\n  \"name\": \"Postman_test\",\r\n  \"desc\": \"Used for autotest, this should be deleted by now probably\",\r\n  \"email\": \"gidropony1905@gmail.com\",\r\n  \"phone\": \"9625568900\",\r\n  \"models\": [\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение организации по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(200);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"desc\",\r",
									"        \"info\",\r",
									"        \"models\",\r",
									"        \"created_at\",\r",
									"        \"updated_at\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"            },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"desc\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"info\": {\r",
									"            \"type\": \"object\"\r",
									"        },\r",
									"        \"models\": {\r",
									"            \"type\": \"array\"\r",
									"        },\r",
									"        \"created_at\":{\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updated_at\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization/{{organisation_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization",
								"{{organisation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление организации/добавление модели курса в организацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Adding model to organisation\", () =>{\r",
									"    let thisRequest = {\r",
									"        url: `https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/${pm.collectionVariables.get('organisation_id')}`,\r",
									"        method: 'PATCH',\r",
									"        header: {\r",
									"        'accept': 'application/json',\r",
									"        'Authorization': `${pm.collectionVariables.get('content_manager_token')}`\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                \"models\": [\r",
									"                    {\r",
									"                        \"_id\": `${pm.collectionVariables.get('model_id')}`,\r",
									"                        \"name\": \"Postman Test\"\r",
									"                    }\r",
									"                ]\r",
									"            }),\r",
									"            options: {\r",
									"                raw: {\r",
									"                    language: 'json'\r",
									"                }\r",
									"            }\r",
									"                \r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(thisRequest, (error, response) => {\r",
									"        pm.expect(response, \"Model has not been added to organisation\").to.have.status(200);\r",
									"    });\r",
									"})\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"desc\",\r",
									"        \"info\",\r",
									"        \"models\",\r",
									"        \"created_at\",\r",
									"        \"updated_at\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"            },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"desc\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"info\": {\r",
									"            \"type\": \"object\"\r",
									"        },\r",
									"        \"models\": {\r",
									"            \"type\": \"array\"\r",
									"        },\r",
									"        \"created_at\":{\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updated_at\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": \"gidropony1905@gmail.com\",\r\n  \"name\": \"Postman_test\",\r\n  \"desc\": \"Used for autotest, this should be deleted by now probably\",\r\n  \"email\": \"gidropony1905@gmail.com\",\r\n  \"phone\": \"9625568900\"\r\n}"
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/{{organisation_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"{{organisation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление модели в организацию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding model to organisation\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"models\": [\r\n        {\r\n            \"_id\": \"{{model_id}}\",\r\n            \"name\": \"Postman Test\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/{{organisation_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"{{organisation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск организаций",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(200);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(200);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"items\",\r",
									"        \"totalCount\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"items\": {\r",
									"            \"type\": \"array\",\r",
									"            },\r",
									"        \"totalCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application-json"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization?page=1&limit=10&name=1",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "name",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление Аккаунт менеджера",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"desc\",\r",
									"        \"info\",\r",
									"        \"models\",\r",
									"        \"created_at\",\r",
									"        \"updated_at\",\r",
									"        \"account_manager\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"            },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"desc\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"info\": {\r",
									"            \"type\": \"object\"\r",
									"        },\r",
									"        \"models\": {\r",
									"            \"type\": \"array\"\r",
									"        },\r",
									"        \"created_at\":{\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updated_at\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"account_manager\": {\r",
									"            \"type\": \"object\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "{{content_manager_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountId\": \"{{content_manager_id}}\",\r\n  \"organizationId\": \"{{organisation_id}}\"\r\n}"
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization/account/create",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization",
								"account",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение Аккаунт менеджера ???",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = pm.response.json()\r",
									"// var Ajv = require('ajv'),\r",
									"//     ajv = new Ajv({logger: console}),\r",
									"//     schema = {\r",
									"//     \"$id\": \"http://example.com/example.json\",\r",
									"//     \"type\": \"array\",\r",
									"//     \"default\": [],\r",
									"//     \"required\": [\r",
									"//         \"id\",\r",
									"//         \"name\",\r",
									"//         \"desc\",\r",
									"//         \"info\",\r",
									"//         \"models\",\r",
									"//         \"created_at\",\r",
									"//         \"updated_at\",\r",
									"//         \"account_manager\"\r",
									"//     ],\r",
									"//     \"additionalProperties\": false,\r",
									"//     \"properties\": {\r",
									"//         \"id\": {\r",
									"//             \"type\": \"string\",\r",
									"//             },\r",
									"//         \"name\": {\r",
									"//             \"type\": \"string\",\r",
									"//         },\r",
									"//         \"desc\": {\r",
									"//             \"type\": \"string\",\r",
									"//         },\r",
									"//         \"info\": {\r",
									"//             \"type\": \"object\"\r",
									"//         },\r",
									"//         \"models\": {\r",
									"//             \"type\": \"array\"\r",
									"//         },\r",
									"//         \"created_at\":{\r",
									"//             \"type\": \"string\"\r",
									"//         },\r",
									"//         \"updated_at\": {\r",
									"//             \"type\": \"string\"\r",
									"//         },\r",
									"//         \"account_manager\": {\r",
									"//             \"type\": \"object\"\r",
									"//         }\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// pm.test(\"Schema is valid\", () => {\r",
									"//     pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization/account/get?id_auth={{organisator_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization",
								"account",
								"get"
							],
							"query": [
								{
									"key": "id_auth",
									"value": "{{organisator_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление  Аккаунт менеджера ???",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountId\": \"{{organisator_id}}\",\r\n  \"organizationId\": \"{{organisation_id}}\"\r\n}"
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organization/account/delete",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organization",
								"account",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление Юзер- Орга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
									"});\r",
									" \r",
									"\r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"role\",\r",
									"        \"createdAt\",\r",
									"        \"oneid\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"            },\r",
									"        \"role\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"oneid\": {\r",
									"            \"type\": \"object\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"idUser\": \"{{organisator_id}}\",\r\n  \"idOrg\": \"{{organisation_id}}\"\r\n}"
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/user",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление Юзер- Орга организации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"changedCourses\",\r",
									"        \"deletedUser\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"changedCourses\": {\r",
									"            \"type\": \"array\",\r",
									"            },\r",
									"        \"deletedUser\": {\r",
									"            \"type\": \"object\",\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"deleteUserId\": \"{{organisator_id}}\",\r\n  \"replaceUserId\": \"{{organisator_2_id}}\",\r\n  \"organizationId\": \"{{organisation_id}}\"\r\n}"
						},
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/replace-users",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"replace-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение Юзер- Оргов организации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(200);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"items\",\r",
									"        \"totalCount\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"items\": {\r",
									"            \"type\": \"array\",\r",
									"            },\r",
									"        \"totalCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/users?page=1&limit=10&query=1&fio=Postman_test&organization={{organisation_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "1"
								},
								{
									"key": "fio",
									"value": "Postman_test"
								},
								{
									"key": "organization",
									"value": "{{organisation_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение тестируемых организации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(200);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    pm.request.headers.upsert({\r",
									"        'key': 'Authorization',\r",
									"        'value': `${pm.collectionVariables.get('tester_token')}`\r",
									"        });\r",
									"    pm.sendRequest(pm.request, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json()\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"items\",\r",
									"        \"totalCount\"\r",
									"    ],\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"        \"items\": {\r",
									"            \"type\": \"array\",\r",
									"            },\r",
									"        \"totalCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/testers?organization={{organisation_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"testers"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "query",
									"value": "Postman_test",
									"disabled": true
								},
								{
									"key": "fio",
									"value": "Postman_test",
									"disabled": true
								},
								{
									"key": "organization",
									"value": "{{organisation_id}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "courseIds",
									"value": "{{course_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление организации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Permission test for content-manager\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									" \r",
									"pm.test(\"Permission test for organisator\", () => {\r",
									"    let thisRequest = {\r",
									"        url: `https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/${pm.collectionVariables.get('organisation_1_id')}`,\r",
									"        method: 'DELETE',\r",
									"        header: {\r",
									"        'accept': 'application/json',\r",
									"        'Authorization': `${pm.collectionVariables.get('organisator_token')}`\r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(thisRequest, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for organisator failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Permission test for tester\", () => {\r",
									"    let thisRequest = {\r",
									"        url: `https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/${pm.collectionVariables.get('organisation_2_id')}`,\r",
									"        method: 'DELETE',\r",
									"        header: {\r",
									"        'accept': 'application/json',\r",
									"        'Authorization': `${pm.collectionVariables.get('tester_token')}`\r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(thisRequest, (error, response) => {\r",
									"        pm.expect(response, \"Permission test for tester failed\").to.have.status(403);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "{{content_manager_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api-buildernext-assmnt.unionetest.ru/api/v3/organizations/{{organisation_id}}",
							"protocol": "https",
							"host": [
								"api-buildernext-assmnt",
								"unionetest",
								"ru"
							],
							"path": [
								"api",
								"v3",
								"organizations",
								"{{organisation_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "today",
			"value": ""
		},
		{
			"key": "tomorrow",
			"value": ""
		},
		{
			"key": "content_manager_id",
			"value": ""
		},
		{
			"key": "organisator_id",
			"value": ""
		},
		{
			"key": "tester_id",
			"value": ""
		},
		{
			"key": "organisation_id",
			"value": ""
		},
		{
			"key": "model_id",
			"value": ""
		},
		{
			"key": "model",
			"value": ""
		},
		{
			"key": "competency_block_id",
			"value": ""
		},
		{
			"key": "competency_block",
			"value": ""
		},
		{
			"key": "sphere_id",
			"value": ""
		},
		{
			"key": "competency_id",
			"value": ""
		},
		{
			"key": "question_id",
			"value": ""
		},
		{
			"key": "answer_list",
			"value": ""
		},
		{
			"key": "correct_answer_id",
			"value": ""
		},
		{
			"key": "course_id",
			"value": ""
		},
		{
			"key": "course_stage_id",
			"value": ""
		},
		{
			"key": "organisation_1_id",
			"value": ""
		},
		{
			"key": "organisation_2_id",
			"value": ""
		},
		{
			"key": "organisator_2_token",
			"value": ""
		},
		{
			"key": "organisator_2_id",
			"value": ""
		}
	]
}